def xylo_alg():
  set_target_payload(1.560000, [0.021000, -0.004000, 0.012000], [0.003230, 0.003230, 0.003230, 0.000000, 0.000000, 0.000000])
  set_gravity([0.0, 0.0, 9.82])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  modbus_add_signal("192.168.1.3", 255, 1, 0, "MODBUS_1", False)
  modbus_set_signal_update_frequency("MODBUS_1", 10)
  modbus_add_signal("192.168.1.3", 255, 1, 1, "MODBUS_2", False)
  modbus_set_signal_update_frequency("MODBUS_2", 10)
  modbus_set_runstate_dependent_choice("MODBUS_2",0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  step_count_21c74c99_19f1_45f8_a7c6_cf3ed1f45295 = 0.0
  thread Step_Counter_Thread_4c121c01_66c0_48f2_8d1f_d80c1ed8c8f6():
    while (True):
      step_count_21c74c99_19f1_45f8_a7c6_cf3ed1f45295 = step_count_21c74c99_19f1_45f8_a7c6_cf3ed1f45295 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_4c121c01_66c0_48f2_8d1f_d80c1ed8c8f6()
  set_tcp(p[-0.14012046171498785,0.19019515338934811,0.04842267341323764,0.0,0.0,0.0])
  global Plane_1=p[-0.4714879574018183,0.18239119704499956,0.005769981555979839,-0.030031249886405566,0.013860523830950745,-0.08092320889629984]
  global Plane_2=p[-0.34742574921530306,0.17007644943570988,0.0046902647897639,-0.04254361836361456,-0.010887231622062083,-0.028777788371895117]
  global Plane_3=p[-0.18286572692734604,0.16294154892961848,0.012034501005351327,-0.03045059549896909,-0.006753024808885972,-0.03531463021647342]
  global Point_1=p[-0.3154214795762654,-0.1840525916503369,0.030424798533213088,0.028402752398934528,3.092041872144473,-0.05170194734512634]
  global plate_drawer=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global tool1=p[-0.4760668999513158,0.17960017562040173,0.011351157460690847,-0.043650958305520064,0.003258777353998389,-0.07097667869308488]
  global tool2_plane=p[-0.3528742675067108,0.16993927339372164,0.010660187018904428,-0.04900714994696994,0.0013514840765308242,-0.03305953020602694]
  global xylophone=p[-0.4394626275688903,-0.15482936172082473,0.05088246158435061,0.19215027065623264,0.11512253653215293,-2.4006608274772616]
  global bonk_from_p=p[-.422817067496, -.178234399564, .119571387626, -3.059861511833, -.023948974455, .149003528284]
  global bonk_to_p=p[-.417362438779, -.171316349537, .069190975675, -2.950506496544, -.031340855901, -.043080269359]
  global G0_p=p[-.422819046896, -.178249351317, .119598015188, -3.059814898392, -.024074482379, .149195112677]
  global G0_q=[-0.5147412459002894, -1.5797878704466761, 2.331000630055563, -2.447634359399313, 4.6929450035095215, 1.0400123596191406]
  global A1_p=p[-.409588359081, -.192861042944, .119010839199, -3.059830035118, -.024093461802, .149197640054]
  global A1_q=[-0.4866674582110804, -1.6414410076537074, 2.3922463099109095, -2.4466411075987757, 4.689561367034912, 1.0678285360336304]
  global B1_p=p[-.392731963943, -.211468094493, .118274810928, -3.059848440766, -.024037695924, .149219334940]
  global B1_q=[-0.4443252722369593, -1.7210589847960414, 2.4623306433307093, -2.4360562763609828, 4.684492588043213, 1.1098517179489136]
  global C1_p=p[-.375945510094, -.229992868130, .117515413920, -3.059796344790, -.024022343878, .149190774753]
  global C1_q=[-0.39302093187441045, -1.8000394306578578, 2.5222612063037317, -2.415445467034811, 4.678332328796387, 1.1607542037963867]
  global D1_p=p[-.362299473947, -.245077686446, .116916926328, -3.059836941996, -.024026511425, .149168989335]
  global D1_q=[-0.343027416859762, -1.8621117077269496, 2.562953058873312, -2.3922063312926234, 4.672492980957031, 1.2103774547576904]
  global E1_p=p[-.345368564446, -.263765005577, .116168618358, -3.059827003806, -.023995339875, .149219524936]
  global E1_q=[-0.2688224951373499, -1.9324127636351527, 2.6028319040881556, -2.358563085595602, 4.663948059082031, 1.284106731414795]
  global F1_p=p[-.330765750370, -.279892305047, .115530760878, -3.059775053564, -.024078564461, .149295513712]
  global F1_q=[-0.19227773347963506, -1.9821764431395472, 2.6272602717029017, -2.329271455804342, 4.655349254608154, 1.3601579666137695]
  global G1_p=p[-.310940354751, -.301790266086, .114649219637, -3.059811461551, -.024059690556, .149269797118]
  global G1_q=[-0.06837302843202764, -2.024731775323385, 2.645749870930807, -2.2973114452757777, 4.642183303833008, 1.4835561513900757]
  global A2_p=p[-.299016518505, -.268671631205, .238893445777, -2.335285448239, -2.015892571345, .458959372558]
  global A2_q=[0.008662508800625801, -2.461897989312643, 2.5351040999041956, -1.888682027856344, 4.885365009307861, 0.1768365055322647]
  global B2_p=p[-.288756337574, -.279979648270, .238339040166, -2.335408572909, -2.016182459442, .458618710899]
  global B2_q=[0.11844982206821442, -2.422835966149801, 2.5391560236560267, -1.9484616718687953, 4.858047962188721, 0.2844366729259491]
  global C2_p=p[-.265095909931, -.306121026643, .237315722194, -2.335456710784, -2.016079608727, .458681902405]
  global C2_q=[0.37932088971138, -2.2882501087584437, 2.530827585850851, -2.1025239429869593, 4.787031173706055, 0.5372059345245361]
  global D2_p=p[-.251569280719, -.321086044145, .236820948864, -2.335444313379, -2.015826707490, .459063025778]
  global D2_q=[0.5228182673454285, -2.1953398189940394, 2.512372080479757, -2.184618135491842, 4.745591163635254, 0.6749822497367859]
  global E2_p=p[-.234346390857, -.340066219550, .236058463407, -2.335281785979, -2.015934153249, .459070730939]
  global E2_q=[0.6909096240997314, -2.0736094913878382, 2.4744017759906214, -2.269713064233297, 4.696341514587402, 0.8356468677520752]
  global F2_p=p[-.222023528513, -.353690314404, .235427791702, -2.335499672360, -2.015842700115, .458783698742]
  global F2_q=[0.8005084991455078, -1.9871674976744593, 2.4375818411456507, -2.315758367578024, 4.664460182189941, 0.9407198429107666]
  global G2_p=p[-.203579419789, -.370355730128, .235158070277, -2.335479477802, -2.015952356226, .458897787035]
  global G2_q=[0.9352166652679443, -1.8884088001646937, 2.382078472767965, -2.350384374658102, 4.626092910766602, 1.070078730583191]
  def SubProgram_1():
    $ 20 "SubProgram_1" "noBreak"
    $ 21 "MoveJ"
    $ 22 "G0" "breakAfter"
    movej(get_inverse_kin(G0_p, qnear=G0_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "A1" "breakAfter"
    movej(get_inverse_kin(A1_p, qnear=A1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "B1" "breakAfter"
    movej(get_inverse_kin(B1_p, qnear=B1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 25 "C1" "breakAfter"
    movej(get_inverse_kin(C1_p, qnear=C1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "D1" "breakAfter"
    movej(get_inverse_kin(D1_p, qnear=D1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "E1" "breakAfter"
    movej(get_inverse_kin(E1_p, qnear=E1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 28 "F1" "breakAfter"
    movej(get_inverse_kin(F1_p, qnear=F1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 29 "G1" "breakAfter"
    movej(get_inverse_kin(G1_p, qnear=G1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 30 "A2" "breakAfter"
    movej(get_inverse_kin(A2_p, qnear=A2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 31 "B2" "breakAfter"
    movej(get_inverse_kin(B2_p, qnear=B2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 32 "C2" "breakAfter"
    movej(get_inverse_kin(C2_p, qnear=C2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 33 "D2" "breakAfter"
    movej(get_inverse_kin(D2_p, qnear=D2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 34 "E2" "breakAfter"
    movej(get_inverse_kin(E2_p, qnear=E2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 35 "F2" "breakAfter"
    movej(get_inverse_kin(F2_p, qnear=F2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 36 "G2" "breakAfter"
    movej(get_inverse_kin(G2_p, qnear=G2_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def SubProgram_2():
    $ 37 "SubProgram_2" "noBreak"
    $ 38 "MoveJ"
    $ 39 "bonk" "breakAfter"
    movej(pose_add(get_target_tcp_pose(), pose_sub(bonk_to_p, bonk_from_p)), a=52.35987755982989, v=6.283185307179586)
  end
  $ 16 "Thread_1"
  thread Thread_1():
    while (True):
      $ 17 "If waiting"
      global thread_flag_17=0
      thread Thread_if_17():
        $ 18 "Wait: 0.5"
        sleep(0.5)
        $ 19 "waiting≔ False "
        global waiting=  False  
        thread_flag_17 = 1
      end
      if (waiting):
        global thread_handler_17=run Thread_if_17()
        while (thread_flag_17 == 0):
          if not(waiting):
            kill thread_handler_17
            thread_flag_17 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_17 = 2
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 1 "Robot Program"
  $ 2 "Set"
  set_tcp(p[-0.14012046171498785,0.19019515338934811,0.04842267341323764,0.0,0.0,0.0])
  $ 4 "waiting≔ False "
  global waiting=  False  
  $ 5 "rest≔ False "
  global rest=  False  
  $ 6 "Script: Xylophone_Movement.script"
  n=[7,15,5,3,4,15,0,15,0,2,4,6,5,15,3,15,-1]
  w = [G0_q, A1_q, B1_q, C1_q, D1_q, E1_q, F1_q, G1_q, A2_q, B2_q, C2_q, D2_q, E2_q, F2_q, G2_q]
  
  #j = 0
  #while n[j] != -1:
  #i=n[j]
  #q=[w[i,0],w[i,1],w[i,2],w[i,3],w[i,4],w[i,5]]
  #movej(q)
  #j= j+1
  #end
  
  
  #d={"G0":0,"A1":1,"B1":2,"C1":3,"D1":4,"E1":5,"F1":6,"G1":7,"A2":8,"B2":9,"C2":10,"D2":11,"E2":12,"F2":13,"G2":14}
  $ 7 "j≔0"
  global j=0
  $ 8 "Loop n[j]≠-1"
  while (n[j] != -1):
    $ 9 "waiting≔ True "
    global waiting=  True  
    $ 10 "Script: goto_ith_wp.script"
    rest = False
    i=n[j]
    
    if i == 15:
    rest = True
    else:
    q=[w[i,0],w[i,1],w[i,2],w[i,3],w[i,4],w[i,5]]
    movej(q,a=8,v=6)
    end
    $ 11 "j≔j+1"
    global j=j+1
    $ 12 "Wait  not waiting"
    while (not(  not  waiting)):
      sync()
    end
    $ 13 "If  not rest"
    if (  not  rest):
      $ 14 "MoveJ"
      $ 15 "bonk" "breakAfter"
      movej(pose_add(get_target_tcp_pose(), pose_sub(bonk_to_p, bonk_from_p)), a=17.453292519943293, v=6.283185307179586)
    end
  end
end
